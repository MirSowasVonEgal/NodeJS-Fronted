{"remainingRequest":"C:\\Users\\timoo\\Desktop\\ShadeHost\\Entwicklung\\NodeJS-Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\timoo\\Desktop\\ShadeHost\\Entwicklung\\NodeJS-Frontend\\src\\views\\Pages\\AGB.vue?vue&type=template&id=c65be340&","dependencies":[{"path":"C:\\Users\\timoo\\Desktop\\ShadeHost\\Entwicklung\\NodeJS-Frontend\\src\\views\\Pages\\AGB.vue","mtime":1633361344275},{"path":"C:\\Users\\timoo\\Desktop\\ShadeHost\\Entwicklung\\NodeJS-Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1632338999961},{"path":"C:\\Users\\timoo\\Desktop\\ShadeHost\\Entwicklung\\NodeJS-Frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1632339000311},{"path":"C:\\Users\\timoo\\Desktop\\ShadeHost\\Entwicklung\\NodeJS-Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1632338999961},{"path":"C:\\Users\\timoo\\Desktop\\ShadeHost\\Entwicklung\\NodeJS-Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1632339000311}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}