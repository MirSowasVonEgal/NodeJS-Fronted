{"remainingRequest":"C:\\Users\\timoo\\OneDrive\\Desktop\\Projekte\\NodeJS-Fronted\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\timoo\\OneDrive\\Desktop\\Projekte\\NodeJS-Fronted\\src\\views\\Pages\\VServer\\ViewVServer.vue?vue&type=template&id=14cba9e9&","dependencies":[{"path":"C:\\Users\\timoo\\OneDrive\\Desktop\\Projekte\\NodeJS-Fronted\\src\\views\\Pages\\VServer\\ViewVServer.vue","mtime":1633285610718},{"path":"C:\\Users\\timoo\\OneDrive\\Desktop\\Projekte\\NodeJS-Fronted\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1631474224512},{"path":"C:\\Users\\timoo\\OneDrive\\Desktop\\Projekte\\NodeJS-Fronted\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1631474242780},{"path":"C:\\Users\\timoo\\OneDrive\\Desktop\\Projekte\\NodeJS-Fronted\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1631474224512},{"path":"C:\\Users\\timoo\\OneDrive\\Desktop\\Projekte\\NodeJS-Fronted\\node_modules\\vue-loader\\lib\\index.js","mtime":1631474242777}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}