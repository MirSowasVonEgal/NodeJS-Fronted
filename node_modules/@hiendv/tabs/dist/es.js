export { default as themeDefault } from '../themes/default.module.scss';
export { default as themeDark } from '../themes/dark.module.scss';
export { default as themeMaterial } from '../themes/material.module.scss';
export { default as themeMaterialDark } from '../themes/material-dark.module.scss';
export { default as themeMetro } from '../themes/metro.module.scss';
export { default as themeMetroDark } from '../themes/metro-dark.module.scss';

function setHashEmpty () {
  if (!window.history.pushState) {
    return
  }

  window.history.pushState('', document.title, window.location.pathname + window.location.search);
}

function setHash (rawHash) {
  if (!rawHash) {
    return setHashEmpty()
  }

  const normalized = `#${rawHash}`;

  if (normalized === window.location.hash) {
    return
  }

  window.location.hash = normalized;
}

const isObject = (obj) => obj && typeof obj === 'object';
function deepmerge (target, source) {
  if (!isObject(source)) {
    return target
  }

  if (!isObject(target)) {
    return source
  }

  target = Object.assign({}, target);
  Object.keys(source).forEach(key => {
    const targetValue = target[key];
    const sourceValue = source[key];

    if (Array.isArray(targetValue) && Array.isArray(sourceValue)) {
      target[key] = targetValue.concat(sourceValue);
    } else if (isObject(targetValue) && isObject(sourceValue)) {
      target[key] = deepmerge(Object.assign({}, targetValue), sourceValue);
    } else {
      target[key] = sourceValue;
    }
  });

  return target
}

export { deepmerge, setHash };
